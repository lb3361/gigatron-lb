

def scope():
    ctrlBits_v5 = 0x1f8
    videoModeB = 0xa   # contain bankinfo on patched rom
    videoModeC = 0xb   # >= 0xfc on patched rom

    def code_bank():
        # Clobbers R21, R22
        nohop()
        ## save current bank
        label('_cons_save_current_bank')
        LD(videoModeB);ANDI(0xfc);XORI(0xfc);BNE('.cscb1')
        LDWI('.savx');STW(R22);LD(videoModeC);POKE(R22)
        label('.cscb1')
        RET()
        ## restore_saved_bank
        label('_cons_restore_saved_bank')
        LDW('sysFn');STW(R21)
        LDWI('SYS_ExpanderControl_v4_40');STW('sysFn');
        label('.savx', pc()+2)
        LDWI(0x00F0);SYS(40)
        LDW(R21);STW('sysFn')
        RET()
        ## set extended banking code for address in vAC
        label('_cons_set_bank_even')
        BGE('.wbb1')
        LDWI(0xF8F0);BRA('.wbb3')
        label('.wbb1')
        LDWI(0xE8F0);BRA('.wbb3')
        label('_cons_set_bank_odd')
        BGE('.wbb2')
        LDWI(0xD8F0);BRA('.wbb3')
        label('.wbb2')
        LDWI(0xC8F0);BRA('.wbb3')
        label('.wbb3')
        STW(R22)
        LDW('sysFn');STW(R21)
        LDWI('SYS_ExpanderControl_v4_40');STW('sysFn')
        LDW(R22);SYS(40)
        LDW(R21);STW('sysFn')
        RET()
        
    module(name='cons_bank.s',
           code=[ ('EXPORT', '_cons_save_current_bank'),
                  ('EXPORT', '_cons_restore_saved_bank'),
                  ('EXPORT', '_cons_set_bank_even'),
                  ('EXPORT', '_cons_set_bank_odd'),
                  ('CODE', '_cons_set_bank', code_bank),
                  ('PLACE', '_cons_set_bank', 0x0000, 0x7fff) ] )

    
    # -- int _console_printchars(int fgbg, char *addr, const char *s, int len)
    #
    # Draws up to `len` characters from string `s` at the screen
    # position given by address `addr`.  This assumes that the
    # horizontal offsets in the string table are all zero. All
    # characters are printed on a single line (no newline).  The
    # function returns when any of the following conditions is met:
    # (1) `len` characters have been printed, (2) the next character
    # would not fit horizontally on the screen, or (3), an unprintable
    # character, i.e. not in [0x20-0x83], has been met.

    def code_printchars():
        label('_console_printchars')
        PUSH()
        CALLI('_cons_save_current_bank')
        _LDI('SYS_VDrawBits_134');STW('sysFn')
        LDW(R8);STW('sysArgs0')                  # move fgbg, freeing R8
        LDI(0);STW(R12)                          # R12: character counter
        label('.loop')
        LDW(R10);PEEK();STW(R8)                  # R8: character code
        LDI(1);ADDW(R10);STW(R10)                # next char
        LDWI(0x8000);ORW(R9);STW('sysArgs4')     # destination address
        LDW(R9);ADDI(3);STW(R9);                 # next address
        LD(vACL);SUBI(0xA0);_BGT('.ret')         # beyond screen?
        _LDI('font32up');STW(R13)                # R13: font address
        LDW(R8);SUBI(32);_BLT('.ret'  )          # c<32
        STW(R8);SUBI(50);_BLT('.draw')           # 32 <= c < 82
        STW(R8);SUBI(50);_BGE('.ret')            # >= 132
        _LDI('font82up');STW(R13)
        label('.draw')
        CALLI('_printonechar')
        LDI(1);ADDW(R12);STW(R12);               # increment counter
        XORW(R11);_BNE('.loop')                  # loop
        label('.ret')
        tryhop(4);LDW(R12);POP();RET()

    def code_printonechar():
        nohop()
        label('_printonechar')
        PUSH()
        LDW(R9);CALLI('_cons_set_bank_even')
        LDW(R8);LSLW();LSLW();ADDW(R8);ADDW(R13)
        STW(R13);LUP(0);ST('sysArgs2');SYS(134);INC('sysArgs4')
        LDI(2);ADDW(R13);LUP(0);ST('sysArgs2');SYS(134);INC('sysArgs4')
        LDI(4);ADDW(R13);LUP(0);ST('sysArgs2');SYS(134)
        LDW('sysArgs4');SUBI(2);STW('sysArgs4')
        LDW(R9);CALLI('_cons_set_bank_odd');
        LDI(1);ADDW(R13);LUP(0);ST('sysArgs2');SYS(134);INC('sysArgs4')
        LDI(3);ADDW(R13);LUP(0);ST('sysArgs2');SYS(134);INC('sysArgs4')
        LDI(0);ST('sysArgs2');SYS(134)
        CALLI('_cons_restore_saved_bank')
        tryhop(2);POP();RET()

    module(name='cons_printchar.s',
           code=[ ('EXPORT', '_console_printchars'),
                  ('IMPORT', '_cons_save_current_bank'),
                  ('IMPORT', '_cons_set_bank_even'),
                  ('IMPORT', '_cons_set_bank_odd'),
                  ('IMPORT', '_cons_restore_saved_bank'),
                  ('CODE', '_console_printchars', code_printchars),
                  ('PLACE', '_console_printchars', 0x0000, 0x7fff),
                  ('CODE', '_printonechar', code_printonechar),
                  ('PLACE', '_printonechar', 0x0000, 0x7fff) ] )

    
    # -- void _console_clear(char *addr, char clr, int nl)
    #
    # Clears from addr to the end of line with color clr.
    # Repeats for nl successive lines.

    def code_clear():
        label('_console_clear')
        PUSH()
        CALLI('_cons_save_current_bank')
        LDI(160);SUBW(R8);ST(R11)
        LD(R9);ANDI(0x3f);ST('sysArgs1')
        LDWI('SYS_SetMemory_v2_54');STW('sysFn')
        label('.loop')
        # even pixels
        LDW(R8);CALLI('_cons_set_bank_even')
        LD(R11);ST('sysArgs0')
        LDWI(0x8000);ORW(R8);STW('sysArgs2')
        SYS(54)
        # odd pixels
        LDW(R8);CALLI('_cons_set_bank_odd')
        LD(R11);ST('sysArgs0')
        LDWI(0x8000);ORW(R8);STW('sysArgs2')
        SYS(54)
        # loop
        INC(R8+1)
        LDW(R10);SUBI(1);STW(R10);
        _BNE('.loop')
        CALLI('_cons_restore_saved_bank')
        tryhop(2);POP();RET()

    module(name='cons_clear.s',
           code=[ ('EXPORT', '_console_clear'),
                  ('IMPORT', '_cons_save_current_bank'),
                  ('IMPORT', '_cons_set_bank_even'),
                  ('IMPORT', '_cons_set_bank_odd'),
                  ('IMPORT', '_cons_restore_saved_bank'),
                  ('CODE', '_console_clear', code_clear),
                  ('PLACE', '_console_clear', 0x0000, 0x7fff) ] )

    
scope()

# Local Variables:
# mode: python
# indent-tabs-mode: ()
# End:
#VCPUv5

# ======== ('DATA', '.6', code0, 8, 2)
def code0():
	align(2);
	label('.6');
	words(3); # 3
	words(0); # 0
	words(0); # 0
	bytes(1); # 1
	bytes(1); # 1
# ======== ('CODE', 'console_exitm_msgfunc', code1)
def code1():
	label('console_exitm_msgfunc');
	_PROLOGUE(16,6,0xf0); # save=R4-7
	LDW(R8);STW(R7);
	LDW(R9);STW(R6);
	LDW(R6);_BEQ('.4');
	_MOVM('.6','console_state',8,2);
	_LDI(v('console_state')+4);STW(R22);
	_LDI('console_info');DEEK();DOKE(R22);
	LDW(R6);STW(R8);
	_LDI(v('console_info')+2);DEEK();STW(R9);
	CALLI('console_print');
	label('.4');
	LDI(0);STW(R5);
	_LDI(0x100);PEEK();ORI(128);_SHLI(8);STW(R4);
	_LDI(0xe1f0);STW(R8);
	CALLI('SYS_ExpanderControl');
	_LDI(0x1f8);PEEK();ANDI(63);STW(R8);
	CALLI('SYS_ExpanderControl');
	_BRA('.10');
	label('.9');
	LD(R5);ADDI(1);STW(R22);
	ST(R5);
	LD(R7);ADDW(R4);STW(R21);
	LDW(R22);POKE(R21);
	label('.10');
	_BRA('.9');
	label('.3');
	_EPILOGUE(16,6,0xf0);
# ======== ('CODE', '_console_setup', code2)
def code2():
	label('_console_setup');
	_PROLOGUE(4,2,0x0); # save=None
	_LDI('_exitm_msgfunc');STW(R22);
	_LDI('console_exitm_msgfunc');DOKE(R22);
	CALLI('console_clear_screen');
	label('.12');
	_EPILOGUE(4,2,0x0);
# ======== (epilog)
code=[
	('DATA', '.6', code0, 8, 2),
	('CODE', 'console_exitm_msgfunc', code1),
	('EXPORT', '_console_setup'),
	('CODE', '_console_setup', code2),
	('IMPORT', 'SYS_ExpanderControl'),
	('IMPORT', '_exitm_msgfunc'),
	('IMPORT', 'console_clear_screen'),
	('IMPORT', 'console_print'),
	('IMPORT', 'console_state'),
	('IMPORT', 'console_info') ]
module(code=code, name='cons_setup.c', cpu=5);

# Local Variables:
# mode: python
# indent-tabs-mode: t
# End:
#VCPUv5

# ======== ('DATA', 'console_state', code0, 8, 2)
def code0():
	align(2);
	label('console_state');
	words(16160); # 16160
	words(0); # 0
	words(0); # 0
	bytes(1); # 1
	bytes(1); # 1
# ======== ('CODE', 'cons_addr', code1)
def code1():
	label('cons_addr');
	PUSH();
	_LDI(v('console_state')+2);DEEK();
	STW(R19);
	_BLT('.4');
	_LDI(v('console_info')+2);DEEK();SUBW(R19);_BLE('.4');
	_LDI(v('console_state')+4);DEEK();
	STW(R18);
	_BLT('.4');
	_LDI('console_info');DEEK();SUBW(R18);_BLE('.4');
	_LDI(v('console_info')+4);ADDW(R18);PEEK();STW(R22);
	LDW(R19);LSLW();ADDW(R19);STW(R21);
	_LDI(0x100);ADDW(R22);PEEK();_SHLI(8);ADDW(R21);
	_BRA('.3');
	label('.4');
	LDI(0);
	label('.3');
	tryhop(2);POP();RET()
# ======== ('CODE', 'console_clear_screen', code2)
def code2():
	label('console_clear_screen');
	_PROLOGUE(4,4,0x0); # save=None
	_LDI('console_state');DEEK();STW(R8);
	CALLI('_console_reset');
	_LDI(v('console_state')+4);STW(R22);
	LDI(0);DOKE(R22);
	_LDI(v('console_state')+2);STW(R22);
	LDI(0);DOKE(R22);
	label('.10');
	_EPILOGUE(4,4,0x0);
# ======== ('CODE', 'console_clear_to_eol', code3)
def code3():
	label('console_clear_to_eol');
	_PROLOGUE(12,8,0x80); # save=R7
	CALLI('cons_addr');
	STW(R7);
	_BEQ('.14');
	LDW(R7);STW(R8);
	_LDI('console_state');DEEK();STW(R9);
	LDI(8);STW(R10);
	CALLI('_console_clear');
	label('.14');
	label('.13');
	_EPILOGUE(12,8,0x80);
# ======== ('CODE', 'scroll', code4)
def code4():
	label('scroll');
	PUSH();
	LDI(0);STW(R19);
	_BRA('.18');
	label('.17');
	_LDI(0x100);STW(R22);
	_LDI(v('console_info')+4);ADDW(R19);PEEK();ADDW(R22);STW(R16);
	LDI(1);ADDW(R19);
	STW(R19);
	XORW(R8);_BNE('.21');
	LD(R9);ST(R17);
	_BRA('.22');
	label('.21');
	_LDI(v('console_info')+4);ADDW(R19);PEEK();STW(R22);
	_LDI(0x100);ADDW(R22);PEEK();STW(R17);
	label('.22');
	LDI(0);STW(R18);
	label('.24');
	LDW(R17);POKE(R16);
	label('.25');
	LDI(1);ADDW(R18);STW(R18);
	LDI(2);ADDW(R16);STW(R16);
	INC(R17);
	LDW(R18);XORI(8);_BNE('.24');
	label('.18');
	LDW(R19);XORW(R8);_BNE('.17');
	label('.16');
	tryhop(2);POP();RET()
# ======== ('CODE', 'console_print', code5)
def code5():
	label('console_print');
	_PROLOGUE(28,10,0xff); # save=R0-7
	LDW(R8);STW(R7);
	LDW(R9);STW(R6);
	LDI(0);STW(R5);
	_LDI(v('console_state')+2);STW(R4);
	_LDI(v('console_state')+4);STW(R3);
	_BRA('.32');
	label('.31');
	_LDI(v('console_info')+2);DEEK();STW(R2);
	_LDI(v('console_state')+6);PEEK();_BEQ('.35');
	LDW(R4);DEEK();SUBW(R2);_BLT('.35');
	LDI(0);DOKE(R4);
	LDW(R3);DEEK();ADDI(1);DOKE(R3);
	label('.35');
	_LDI('console_info');DEEK();STW(R2);
	_LDI(v('console_state')+7);PEEK();_BEQ('.38');
	LDW(R3);DEEK();SUBW(R2);_BLT('.38');
	_LDI(v('console_info')+4);PEEK();STW(R22);
	_LDI(0x100);ADDW(R22);PEEK();STW(R0);
	LDW(R0);_SHLI(8);STW(R8);
	_LDI('console_state');DEEK();STW(R9);
	LDI(8);STW(R10);
	CALLI('_console_clear');
	LDW(R2);STW(R8);
	LD(R0);STW(R9);
	CALLI('scroll');
	LDW(R2);SUBI(1);DOKE(R3);
	label('.38');
	LDW(R5);ADDW(R7);PEEK();STW(R8);
	CALLI('_console_ctrl');
	_BNE('.42');
	CALLI('cons_addr');
	STW(R1);
	_BEQ('.42');
	_LDI('console_state');DEEK();STW(R8);
	LDW(R1);STW(R9);
	LDW(R5);ADDW(R7);STW(R10);
	LDW(R6);SUBW(R5);STW(R11);
	CALLI('_console_printchars');
	STW(R2);
	_BEQ('.42');
	LDW(R4);DEEK();ADDW(R2);DOKE(R4);
	LDW(R5);ADDW(R2);STW(R5);
	_BRA('.43');
	label('.42');
	LDI(1);ADDW(R5);STW(R5);
	label('.43');
	label('.32');
	LDW(R5);_CMPWS(R6);_BGE('.44');
	LDW(R5);ADDW(R7);PEEK();_BNE('.31');
	label('.44');
	LDW(R5);
	label('.28');
	_EPILOGUE(28,10,0xff,saveAC=True);
# ======== ('DATA', '__glink_magic_init', code6, 4, 2)
def code6():
	align(2);
	label('__glink_magic_init');
	words('_console_setup');
	words(0);
# ======== (epilog)
code=[
	('EXPORT', 'console_state'),
	('DATA', 'console_state', code0, 8, 2),
	('CODE', 'cons_addr', code1),
	('EXPORT', 'console_clear_screen'),
	('CODE', 'console_clear_screen', code2),
	('EXPORT', 'console_clear_to_eol'),
	('CODE', 'console_clear_to_eol', code3),
	('CODE', 'scroll', code4),
	('EXPORT', 'console_print'),
	('CODE', 'console_print', code5),
	('DATA', '__glink_magic_init', code6, 4, 2),
	('IMPORT', '_console_clear'),
	('IMPORT', '_console_printchars'),
	('IMPORT', '_console_setup'),
	('IMPORT', '_console_reset'),
	('IMPORT', '_console_ctrl'),
	('IMPORT', 'console_info') ]
module(code=code, name='cons_output.c', cpu=5);

# Local Variables:
# mode: python
# indent-tabs-mode: t
# End:
#VCPUv5

# ======== ('DATA', 'console_info', code0, 20, 2)
def code0():
	align(2);
	label('console_info');
	words(15); # 15
	words(52); # 52
	bytes(0,16);
	bytes(32,48);
	bytes(64,80);
	bytes(96,112);
	bytes(128,144);
	bytes(160,176);
	bytes(192,208);
	bytes(224);
	space(1);
# ======== ('CODE', '_console_reset', code1)
def code1():
	label('_console_reset');
	_PROLOGUE(16,8,0xe0); # save=R5-7
	LDW(R8);STW(R7);
	_LDI(0x100);STW(R5);
	_LDI(3808);STW(R8);
	CALLI('SYS_ExpanderControl');
	LDW(R7);_BLT('.4');
	_LDI(0x800);STW(R8);
	LDW(R7);STW(R9);
	LDI(120);STW(R10);
	CALLI('_console_clear');
	label('.4');
	LDI(8);STW(R6);
	label('.6');
	LDW(R5);STW(R22);
	LDI(2);ADDW(R22);STW(R5);
	LDW(R6);DOKE(R22);
	label('.7');
	LDI(1);ADDW(R6);STW(R6);
	LDW(R6);XORI(128);_BNE('.6');
	label('.3');
	_EPILOGUE(16,8,0xe0);
# ======== (epilog)
code=[
	('EXPORT', 'console_info'),
	('DATA', 'console_info', code0, 20, 2),
	('EXPORT', '_console_reset'),
	('CODE', '_console_reset', code1),
	('IMPORT', 'SYS_ExpanderControl'),
	('IMPORT', '_console_clear') ]
module(code=code, name='cons_geom.c', cpu=5);

# Local Variables:
# mode: python
# indent-tabs-mode: t
# End:
#VCPUv6

# ======== ('DATA', '.6', code0, 8, 2)
def code0():
	align(2);
	label('.6');
	words(3); # 3
	words(0); # 0
	words(0); # 0
	bytes(1); # 1
	bytes(1); # 1
# ======== ('CODE', 'console_exitm_msgfunc', code1)
def code1():
	label('console_exitm_msgfunc');
	_PROLOGUE(16,6,0xf0); # save=R4-7
	LDW(R8);STW(R7);
	LDW(R9);STW(R6);
	LDW(R6);_BEQ('.4');
	_MOVM('.6','console_state',8,2);
	_LDI('console_info');DEEK();STW2(v('console_state')+4);
	LDW(R6);STW(R8);
	_LDI(v('console_info')+2);DEEKA(R9);
	CALLI('console_print');
	label('.4');
	MOVQB(0,R5)
	_LDI(0x100);PEEK();ORI(128);_SHLI(8);STW(R4);
	_LDI(0xe1f0);STW(R8);
	CALLI('SYS_ExpanderControl');
	_LDI(0x1f8);PEEK();ANDI(63);STW(R8);
	CALLI('SYS_ExpanderControl');
	_BRA('.10');
	label('.9');
	LD(R5);ADDI(1);STW(R22);
	MOVB(vAC,R5)
	LD(R7);ADDW(R4);POKEA(R22);
	label('.10');
	_BRA('.9');
	label('.3');
	_EPILOGUE(16,6,0xf0);
# ======== ('CODE', '_console_setup', code2)
def code2():
	label('_console_setup');
	_PROLOGUE(4,2,0x0); # save=None
	_LDI('_exitm_msgfunc');DOKEI('console_exitm_msgfunc');
	CALLI('console_clear_screen');
	label('.12');
	_EPILOGUE(4,2,0x0);
# ======== (epilog)
code=[
	('DATA', '.6', code0, 8, 2),
	('CODE', 'console_exitm_msgfunc', code1),
	('EXPORT', '_console_setup'),
	('CODE', '_console_setup', code2),
	('IMPORT', 'SYS_ExpanderControl'),
	('IMPORT', '_exitm_msgfunc'),
	('IMPORT', 'console_clear_screen'),
	('IMPORT', 'console_print'),
	('IMPORT', 'console_state'),
	('IMPORT', 'console_info') ]
module(code=code, name='cons_setup.c', cpu=6);

# Local Variables:
# mode: python
# indent-tabs-mode: t
# End:
#VCPUv6

# ======== ('DATA', 'console_state', code0, 8, 2)
def code0():
	align(2);
	label('console_state');
	words(16160); # 16160
	words(0); # 0
	words(0); # 0
	bytes(1); # 1
	bytes(1); # 1
# ======== ('CODE', 'cons_addr', code1)
def code1():
	label('cons_addr');
	PUSH();
	_LDI(v('console_state')+2);DEEK();
	STW(R19);
	_BLT('.4');
	_LDI(v('console_info')+2);DEEK();SUBW(R19);_BLE('.4');
	_LDI(v('console_state')+4);DEEK();
	STW(R18);
	_BLT('.4');
	_LDI('console_info');DEEK();SUBW(R18);_BLE('.4');
	LDW(R19);LSLW();ADDW(R19);STW(R22);
	_LDI(v('console_info')+4);ADDW(R18);PEEK();ADDWI(0x100);PEEK();_SHLI(8);ADDW(R22);
	_BRA('.3');
	label('.4');
	LDI(0);
	label('.3');
	tryhop(2);POP();RET()
# ======== ('CODE', 'console_clear_screen', code2)
def code2():
	label('console_clear_screen');
	_PROLOGUE(4,4,0x0); # save=None
	_LDI('console_state');DEEKA(R8);
	CALLI('_console_reset');
	_LDI(v('console_state')+4);DOKEI(0);
	_LDI(v('console_state')+2);DOKEI(0);
	label('.10');
	_EPILOGUE(4,4,0x0);
# ======== ('CODE', 'console_clear_to_eol', code3)
def code3():
	label('console_clear_to_eol');
	_PROLOGUE(12,8,0x80); # save=R7
	CALLI('cons_addr');
	STW(R7);
	_BEQ('.14');
	LDW(R7);STW(R8);
	_LDI('console_state');DEEKA(R9);
	LDI(8);STW(R10);
	CALLI('_console_clear');
	label('.14');
	label('.13');
	_EPILOGUE(12,8,0x80);
# ======== ('CODE', 'scroll', code4)
def code4():
	label('scroll');
	PUSH();
	MOVQW(0,R19)
	_BRA('.18');
	label('.17');
	_LDI(v('console_info')+4);ADDW(R19);PEEK();ADDWI(0x100);STW(R16);
	LDI(1);ADDW(R19);
	STW(R19);
	XORW(R8);_BNE('.21');
	MOVB(R9,R17)
	_BRA('.22');
	label('.21');
	_LDI(v('console_info')+4);ADDW(R19);PEEK();ADDWI(0x100);PEEKA(R17);
	label('.22');
	MOVQW(0,R18)
	label('.24');
	LDW(R17);POKE(R16);
	label('.25');
	INCW(R18);
	ADDVI(2,R16);
	INC(R17);
	LDW(R18);XORI(8);_BNE('.24');
	label('.18');
	LDW(R19);XORW(R8);_BNE('.17');
	label('.16');
	tryhop(2);POP();RET()
# ======== ('CODE', 'console_print', code5)
def code5():
	label('console_print');
	_PROLOGUE(28,10,0xff); # save=R0-7
	LDW(R8);STW(R7);
	LDW(R9);STW(R6);
	MOVQW(0,R5)
	_LDI(v('console_state')+2);STW(R4);
	_LDI(v('console_state')+4);STW(R3);
	_BRA('.32');
	label('.31');
	_LDI(v('console_info')+2);DEEKA(R2);
	_LDI(v('console_state')+6);PEEK();_BEQ('.35');
	DEEKV(R4);SUBW(R2);_BLT('.35');
	LDI(0);DOKE(R4);
	DEEKV(R3);ADDI(1);DOKE(R3);
	label('.35');
	_LDI('console_info');DEEKA(R2);
	_LDI(v('console_state')+7);PEEK();_BEQ('.38');
	DEEKV(R3);SUBW(R2);_BLT('.38');
	_LDI(v('console_info')+4);PEEK();ADDWI(0x100);PEEK();STW(R0);
	LDW(R0);_SHLI(8);STW(R8);
	_LDI('console_state');DEEKA(R9);
	MOVQW(8,R10)
	CALLI('_console_clear');
	LDW(R2);STW(R8);
	LD(R0);STW(R9);
	CALLI('scroll');
	LDW(R2);SUBI(1);DOKE(R3);
	label('.38');
	LDW(R5);ADDW(R7);PEEK();STW(R8);
	CALLI('_console_ctrl');
	_BNE('.42');
	CALLI('cons_addr');
	STW(R1);
	_BEQ('.42');
	_LDI('console_state');DEEKA(R8);
	LDW(R1);STW(R9);
	LDW(R5);ADDW(R7);STW(R10);
	LDW(R6);SUBW(R5);STW(R11);
	CALLI('_console_printchars');
	STW(R2);
	_BEQ('.42');
	DEEKV(R4);ADDW(R2);DOKE(R4);
	ADDVW(R2,R5);
	_BRA('.43');
	label('.42');
	INCW(R5);
	label('.43');
	label('.32');
	LDW(R5);_CMPWS(R6);_BGE('.44');
	LDW(R5);ADDW(R7);PEEK();_BNE('.31');
	label('.44');
	LDW(R5);
	label('.28');
	_EPILOGUE(28,10,0xff,saveAC=True);
# ======== ('DATA', '__glink_magic_init', code6, 4, 2)
def code6():
	align(2);
	label('__glink_magic_init');
	words('_console_setup');
	words(0);
# ======== (epilog)
code=[
	('EXPORT', 'console_state'),
	('DATA', 'console_state', code0, 8, 2),
	('CODE', 'cons_addr', code1),
	('EXPORT', 'console_clear_screen'),
	('CODE', 'console_clear_screen', code2),
	('EXPORT', 'console_clear_to_eol'),
	('CODE', 'console_clear_to_eol', code3),
	('CODE', 'scroll', code4),
	('EXPORT', 'console_print'),
	('CODE', 'console_print', code5),
	('DATA', '__glink_magic_init', code6, 4, 2),
	('IMPORT', '_console_clear'),
	('IMPORT', '_console_printchars'),
	('IMPORT', '_console_setup'),
	('IMPORT', '_console_reset'),
	('IMPORT', '_console_ctrl'),
	('IMPORT', 'console_info') ]
module(code=code, name='cons_output.c', cpu=6);

# Local Variables:
# mode: python
# indent-tabs-mode: t
# End:
#VCPUv6

# ======== ('DATA', 'console_info', code0, 20, 2)
def code0():
	align(2);
	label('console_info');
	words(15); # 15
	words(52); # 52
	bytes(0,16);
	bytes(32,48);
	bytes(64,80);
	bytes(96,112);
	bytes(128,144);
	bytes(160,176);
	bytes(192,208);
	bytes(224);
	space(1);
# ======== ('CODE', '_console_reset', code1)
def code1():
	label('_console_reset');
	_PROLOGUE(16,8,0xe0); # save=R5-7
	LDW(R8);STW(R7);
	_LDI(0x100);STW(R5);
	_LDI(3808);STW(R8);
	CALLI('SYS_ExpanderControl');
	LDW(R7);_BLT('.4');
	_LDI(0x800);STW(R8);
	LDW(R7);STW(R9);
	LDI(120);STW(R10);
	CALLI('_console_clear');
	label('.4');
	MOVQW(8,R6)
	label('.6');
	LDW(R5);STW(R22);
	ADDVI(2,R5);
	LDW(R6);DOKE(R22);
	label('.7');
	INCW(R6);
	LDW(R6);XORI(128);_BNE('.6');
	label('.3');
	_EPILOGUE(16,8,0xe0);
# ======== (epilog)
code=[
	('EXPORT', 'console_info'),
	('DATA', 'console_info', code0, 20, 2),
	('EXPORT', '_console_reset'),
	('CODE', '_console_reset', code1),
	('IMPORT', 'SYS_ExpanderControl'),
	('IMPORT', '_console_clear') ]
module(code=code, name='cons_geom.c', cpu=6);

# Local Variables:
# mode: python
# indent-tabs-mode: t
# End:
